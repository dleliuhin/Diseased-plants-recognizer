function [res] = writeDiseased1GroupResult(fileres, ...
                                                   stats, ...
                                                   marks, ...
                                                   imagename1, ...
                                                   imagename2, ...
                                                   atribute, ...
                                                   count, ...
                                                   res)
count = 0;
sumMarkh = [];
sumMarknh = [];

%% R
markh = double(marks.h.means.R.Contrast);
currentStats = double(mean(stats.R.Contrast));
marknh = double(marks.nh.means.R.Contrast);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('%s - %s | \t %d \t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    imagename1, imagename2, atribute, sprintf('R.Contrast    '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  double(abs(markh - currentStats));
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.R.Correlation);
currentStats = double(mean(stats.R.Correlation));
marknh = double(marks.nh.means.R.Correlation);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('R.Correlation '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;  
sumMarkh(end+1) = abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.R.Energy);
currentStats = double(mean(stats.R.Energy));
marknh = double(marks.nh.means.R.Energy);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('R.Energy      '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.R.Homogeneity);
currentStats = double(mean(stats.R.Homogeneity));
marknh = double(marks.nh.means.R.Homogeneity);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('R.Homogeneity '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);    
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

%% G
markh = double(marks.h.means.G.Contrast);
currentStats = double(mean(stats.G.Contrast));
marknh = double(marks.nh.means.G.Contrast);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('G.Contrast    '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.G.Correlation);
currentStats = double(mean(stats.G.Correlation));
marknh = double(marks.nh.means.G.Correlation);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('G.Correlation '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.G.Energy);
currentStats = double(mean(stats.G.Energy));
marknh = double(marks.nh.means.G.Energy);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('G.Energy      '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.G.Homogeneity);
currentStats = double(mean(stats.G.Homogeneity));
marknh = double(marks.nh.means.G.Homogeneity);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('G.Homogeneity '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

%% B
markh = double(marks.h.means.B.Contrast);
currentStats = double(mean(stats.B.Contrast));
marknh = double(marks.nh.means.B.Contrast);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('B.Contrast    '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.B.Correlation);
currentStats = double(mean(stats.B.Correlation));
marknh = double(marks.nh.means.B.Correlation);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('B.Correlation '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.B.Energy);
currentStats = double(mean(stats.B.Energy));
marknh = double(marks.nh.means.B.Energy);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('B.Energy      '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.B.Homogeneity);
currentStats = double(mean(stats.B.Homogeneity));
marknh = double(marks.nh.means.B.Homogeneity);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('B.Homogeneity '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

%% RG
markh = double(marks.h.means.RG.Contrast);
currentStats = double(mean(stats.RG.Contrast));
marknh = double(marks.nh.means.RG.Contrast);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RG.Contrast   '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.RG.Correlation);
currentStats = double(mean(stats.RG.Correlation));
marknh = double(marks.nh.means.RG.Correlation);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RG.Correlation'), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.RG.Energy);
currentStats = double(mean(stats.RG.Energy));
marknh = double(marks.nh.means.RG.Energy);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RG.Energy     '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.RG.Homogeneity);
currentStats = double(mean(stats.RG.Homogeneity));
marknh = double(marks.nh.means.RG.Homogeneity);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RG.Homogeneity'), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

%% RB
markh = double(marks.h.means.RB.Contrast);
currentStats = double(mean(stats.RB.Contrast));
marknh = double(marks.nh.means.RB.Contrast);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RB.Contrast   '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.RB.Correlation);
currentStats = double(mean(stats.RB.Correlation));
marknh = double(marks.nh.means.RB.Correlation);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RB.Correlation'), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.RB.Energy);
currentStats = double(mean(stats.RB.Energy));
marknh = double(marks.nh.means.RB.Energy);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RB.Energy     '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.RB.Homogeneity);
currentStats = double(mean(stats.RB.Homogeneity));
marknh = double(marks.nh.means.RB.Homogeneity);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('RB.Homogeneity'), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

%% GB
markh = double(marks.h.means.GB.Contrast);
currentStats = double(mean(stats.GB.Contrast));
marknh = double(marks.nh.means.GB.Contrast);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('GB.Contrast   '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.GB.Correlation);
currentStats = double(mean(stats.GB.Correlation));
marknh = double(marks.nh.means.GB.Correlation);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('GB.Correlation'), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.GB.Energy);
currentStats = double(mean(stats.GB.Energy));
marknh = double(marks.nh.means.GB.Energy);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('GB.Energy     '), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

markh = double(marks.h.means.GB.Homogeneity);
currentStats = double(mean(stats.GB.Homogeneity));
marknh = double(marks.nh.means.GB.Homogeneity);
[res, count] = checkResultPercents(markh, ...
                                   currentStats, ...
                                   marknh, ...
                                   count);
fprintf('\t\t\t\t\t\t\t\t | %s | %2.4f  | %2.4f | %2.4f | %2.4f | %2.4f | %d \n', ...
    sprintf('GB.Homogeneity'), ...
    markh, ...
    abs(markh - currentStats), ...
    currentStats, ...
    abs(marknh - currentStats), ...
    marknh, ...
    res);
count = count + 1;
sumMarkh(end+1) =  abs(markh - currentStats);
sumMarknh(end+1) = abs(marknh - currentStats);

%%
hCountPercent = double((count.h)./count*100);
nhCountPercent = double((count.nh)./count *100);
if (hCountPercent > nhCountPercent)
    finalResult = 1;
    res = res + 1;
elseif (hCountPercent < nhCountPercent)
    finalResult = 0;
    ioResnh1 = ioResnh1 + 1;
elseif (hCountPercent == nhCountPercent)
    finalResult = 'undefined';
end

fprintf('Healthy: %3.2f%% , Ill: %3.2f%% , Verdict atribute: %s , sumDelta1: %2.4f ,  sumDelta2: %2.4f \n', ...
    hCountPercent, nhCountPercent, num2str(finalResult), ...
    sum(sumMarkh(isnan(sumMarkh) == 0)), ...
    sum(sumMarknh(isnan(sumMarknh) == 0)));
fprintf('\n');

end